plugins {
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.github.ben-manes.versions' version '0.38.0'
    id "org.sonarqube" version "3.1.1"
    id 'jacoco'
}

group = 'training'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}


sourceSets {
    integrationTest {
        java.srcDir "$projectDir/src/integration/java"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.zalando:problem:0.25.0'
    implementation 'org.zalando:jackson-datatype-problem:0.25.0'
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.6'
    implementation 'org.glassfish.jaxb:jaxb-runtime'
    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'

    integrationTestImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    integrationTestImplementation 'io.rest-assured:json-path'
    integrationTestImplementation 'io.rest-assured:rest-assured'
    integrationTestImplementation 'io.rest-assured:spring-mock-mvc'
    integrationTestImplementation 'com.h2database:h2'
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    finalizedBy jacocoTestReport
}

integrationTest {
    systemProperty 'spring.datasource.url', findProperty('spring.datasource.url')
    systemProperty 'spring.datasource.username', findProperty('spring.datasource.username')
    systemProperty 'spring.datasource.password', findProperty('spring.datasource.password')

    dependsOn(test)
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.projectName", "employees"
        property "sonar.projectKey", "training:employees"
        property "sonar.jacoco.xmlReportPath", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacocoTestReport {
    dependsOn integrationTest // tests are required to run before generating the report

    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))

    reports {
        csv.enabled true
        xml.enabled true
    }
}

check.dependsOn jacocoTestReport 